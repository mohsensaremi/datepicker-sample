{"version":3,"sources":["Sample.js","datepicker/src/components/Month/Month.js","datepicker/src/utils/withHooks.js","datepicker/src/context/index.js","datepicker/src/hooks/index.js","datepicker/src/containers/Month/index.js","datepicker/src/hooks/month.js","datepicker/src/components/Toolbar/Toolbar.js","datepicker/src/containers/Toolbar/index.js","datepicker/src/hooks/toolbar.js","datepicker/src/components/Calendar/Calendar.js","datepicker/src/hooks/calendar.js","datepicker/src/containers/Calendar/index.js","datepicker/src/components/Day/Day.js","datepicker/src/hooks/day.js","datepicker/src/containers/Day/index.js","datepicker/src/containers/CalendarRange/index.js","datepicker/src/hooks/calendarRange.js","datepicker/src/containers/DayRange/index.js","datepicker/src/hooks/dayRange.js","App.js","serviceWorker.js","datepicker/src/context/DatePickerContextProvider.js","index.js"],"names":["Sample","props","CalendarComponent","CalendarComponentProps","DayComponent","isRange","title","useState","value","onChange","className","Month","weekArray","dayIsDisabled","onMouseEnterDay","onMouseOutDay","hoverDate","map","week","index1","day","index2","key","date","disabled","onMouseEnter","onMouseOut","withHooks","hooks","WrappedComponent","hookProps","DatePickerContext","React","createContext","useDatePickerContext","useContext","adapter","getWeekArray","getMonth","Toolbar","onClickNextMonth","onClickPrevMonth","monthName","onClick","format","Calendar","monthData","data","index","length","useCalendar","initialDate","months","setDate","useMemo","i","push","getNextMonth","getPreviousMonth","Day","isToday","isActive","isPast","isHover","text","classnames","useDay","today","isValid","isEqual","isBefore","addDays","calendarHooks","setHoverDate","dayHooks","isAfter","App","CalendarRange","DayRange","Boolean","window","location","hostname","match","DatePickerContextProvider","state","Adapter","Provider","this","children","Component","jMoment","loadPersian","dialect","ReactDOM","render","JalaliUtils","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e71a1230.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst Sample = (props) => {\n\n    const {\n        CalendarComponent,\n        CalendarComponentProps,\n        DayComponent,\n        isRange,\n        title,\n    } = props;\n\n    const [value, onChange] = useState(isRange ? [] : null);\n\n    return (\n        <div className={\"sample\"}>\n            <h2>\n                {title}\n            </h2>\n            <CalendarComponent\n                value={value}\n                onChange={onChange}\n                DayComponent={DayComponent}\n                {...CalendarComponentProps}\n            />\n        </div>\n    );\n};\n\nexport default Sample;\n","import React from 'react';\n\nconst Month = (props) => {\n\n    const {\n        value,\n        onChange,\n        weekArray,\n        dayIsDisabled,\n        DayComponent,\n        onMouseEnterDay,\n        onMouseOutDay,\n        hoverDate,\n    } = props;\n\n    return (\n        <div className={\"month-root\"}>\n            {\n                weekArray.map((week, index1) => {\n\n                    return (\n                        week.map((day, index2) => {\n\n                            return (\n                                <DayComponent\n                                    key={`${index1}-${index2}`}\n                                    date={day}\n                                    disabled={dayIsDisabled(day)}\n                                    value={value}\n                                    onChange={onChange}\n                                    onMouseEnter={onMouseEnterDay}\n                                    onMouseOut={onMouseOutDay}\n                                    hoverDate={hoverDate}\n                                />\n                            );\n                        })\n                    );\n                })\n            }\n        </div>\n    );\n};\n\nexport default Month;\n","import React from 'react';\n\nexport const withHooks = (hooks) => (WrappedComponent) => {\n\n    return (props) => {\n        const hookProps = hooks(props);\n\n        return (\n            <WrappedComponent\n                {...props}\n                {...hookProps}\n            />\n        );\n    }\n};\n","import React from 'react';\n\nexport const DatePickerContext = React.createContext({});\n","import {useContext} from \"react\";\nimport {DatePickerContext} from \"../context\";\n\nexport const useDatePickerContext = () => {\n    return useContext(DatePickerContext);\n};\n","import Month from '../../components/Month';\nimport {withHooks} from '../../utils/withHooks';\nimport {useMonth} from \"../../hooks/month\";\n\nexport default withHooks(useMonth)(Month);\n","import {useDatePickerContext} from \"./index\";\n\nexport const useMonth = (props) => {\n\n    const {\n        date,\n    } = props;\n\n    const {adapter} = useDatePickerContext();\n    const weekArray = adapter.getWeekArray(date);\n    const dayIsDisabled = day => adapter.getMonth(day) !== adapter.getMonth(date);\n\n    return {\n        weekArray,\n        dayIsDisabled,\n    }\n};\n","import React from 'react';\n\nconst Toolbar = (props) => {\n\n    const {\n        onClickNextMonth,\n        onClickPrevMonth,\n        monthName,\n    } = props;\n\n    return (\n        <div\n            className={\"grid-container grid-space-between\"}\n        >\n            <div>\n                {\n                    onClickPrevMonth && (\n                        <button className={\"button\"} onClick={onClickPrevMonth}>\n                            {'<'}\n                        </button>\n                    )\n                }\n            </div>\n            <div>\n                {monthName}\n            </div>\n            <div>\n                {\n                    onClickNextMonth && (\n                        <button className={\"button\"} onClick={onClickNextMonth}>\n                            {'>'}\n                        </button>\n                    )\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Toolbar;\n","import Toolbar from '../../components/Toolbar';\nimport {withHooks} from '../../utils/withHooks';\nimport {useToolbar} from \"../../hooks/toolbar\";\n\nexport default withHooks(useToolbar)(Toolbar);\n","import {useDatePickerContext} from \"./index\";\n\nexport const useToolbar = (props) => {\n\n    const {\n        date,\n    } = props;\n\n    const {adapter} = useDatePickerContext();\n    const monthName = adapter.format(date, \"month\");\n\n    return {\n        monthName,\n    };\n};\n","import React from 'react';\nimport Month from '../../containers/Month';\nimport Toolbar from '../../containers/Toolbar';\n\nconst Calendar = (props) => {\n\n    const {\n        value,\n        onChange,\n        onClickNextMonth,\n        onClickPrevMonth,\n        monthData,\n        DayComponent,\n        onMouseEnterDay,\n        onMouseOutDay,\n        hoverDate,\n    } = props;\n\n\n    return (\n        <div className={\"grid-container\"}>\n            {\n                monthData.map((data, index) => {\n                    return (\n                        <div className={\"calendar-month\"} key={index}>\n                            <Toolbar\n                                date={data.date}\n                                onClickPrevMonth={index === 0 && onClickPrevMonth}\n                                onClickNextMonth={index === monthData.length - 1 && onClickNextMonth}\n                            />\n                            <Month\n                                date={data.date}\n                                value={value}\n                                onChange={onChange}\n                                DayComponent={DayComponent}\n                                onMouseEnterDay={onMouseEnterDay}\n                                onMouseOutDay={onMouseOutDay}\n                                hoverDate={hoverDate}\n                            />\n                        </div>\n                    );\n                })\n            }\n        </div>\n    );\n};\n\nexport default Calendar;\n","import {useDatePickerContext} from \"./index\";\nimport {useState, useMemo} from \"react\";\n\nexport const useCalendar = (props) => {\n\n    const {\n        initialDate,\n        value,\n        months,\n    } = props;\n\n    const {adapter} = useDatePickerContext();\n    const [date, setDate] = useState(adapter.date(value || initialDate));\n\n    const onClickNextMonth = () => {\n        setDate(adapter.getNextMonth(date));\n    };\n    const onClickPrevMonth = () => {\n        setDate(adapter.getPreviousMonth(date));\n    };\n\n    const monthData = useMemo(() => {\n        const data = [{\n            date,\n        }];\n        for (let i = 1; i < months; i++) {\n            data.push({\n                date: adapter.getNextMonth(data[i - 1].date),\n            });\n        }\n        return data;\n    }, [months, date, adapter]);\n\n    return {\n        onClickNextMonth,\n        onClickPrevMonth,\n        date,\n        monthData,\n    };\n};\n","import Calendar from '../../components/Calendar';\nimport {withHooks} from '../../utils/withHooks';\nimport {useCalendar} from \"../../hooks/calendar\";\n\nexport default withHooks(useCalendar)(Calendar);\n","import React from 'react';\nimport classnames from 'classnames';\n\nconst Day = (props) => {\n\n    const {\n        date,\n        disabled,\n        isToday,\n        isActive,\n        isPast,\n        isHover,\n        onClick,\n        onMouseEnter,\n        onMouseOut,\n        text,\n    } = props;\n\n    return (\n        <button\n            className={classnames(\"button\", \"day-root\", {\n                \"day-root-today\": isToday,\n                \"day-root-active\": !disabled && isActive,\n                \"day-root-past\": isPast,\n                \"day-root-hover\": !disabled && isHover,\n            })}\n            disabled={disabled}\n            onClick={() => onClick(date)}\n            onMouseEnter={() => onMouseEnter ? onMouseEnter(date) : null}\n            onMouseOut={() => onMouseOut ? onMouseOut(date) : null}\n        >\n            {text}\n        </button>\n    );\n};\n\nexport default Day;\n","import {useDatePickerContext} from \"./index\";\n\nexport const useDay = (props) => {\n\n    const {\n        date,\n        value,\n        onChange,\n    } = props;\n\n    const {adapter} = useDatePickerContext();\n    const today = adapter.date();\n    const isToday = adapter.format(date, 'fullDate') === adapter.format(today, 'fullDate');\n    const isActive = adapter.isValid(value) && adapter.isEqual(date, value);\n    const isPast = adapter.isBefore(date, adapter.addDays(today, -1));\n    const onClick = () => onChange(date);\n    const text = adapter.format(date, 'dayOfMonth');\n\n    return {\n        isToday,\n        isActive,\n        isPast,\n        onClick,\n        text,\n    };\n};\n","import Day from '../../components/Day';\nimport {withHooks} from '../../utils/withHooks';\nimport {useDay} from \"../../hooks/day\";\n\nexport default withHooks(useDay)(Day);\n","import Calendar from '../../components/Calendar';\nimport {withHooks} from '../../utils/withHooks';\nimport {useCalendarRange} from \"../../hooks/calendarRange\";\n\nexport default withHooks(useCalendarRange)(Calendar);\n","import {useCalendar} from \"./calendar\";\nimport {useState} from 'react';\n\nexport const useCalendarRange = (props) => {\n\n    const calendarHooks = useCalendar(props);\n    const [hoverDate, setHoverDate] = useState(null);\n\n    const onMouseEnterDay = (date) => setHoverDate(date);\n    const onMouseOutDay = () => setHoverDate(null);\n\n\n    return {\n        ...calendarHooks,\n        onMouseEnterDay,\n        onMouseOutDay,\n        hoverDate,\n    };\n};\n","import Day from '../../components/Day';\nimport {withHooks} from '../../utils/withHooks';\nimport {useDayRange} from \"../../hooks/dayRange\";\n\nexport default withHooks(useDayRange)(Day);\n","import {useDatePickerContext} from \"./index\";\nimport {useDay} from \"./day\";\nimport {useState} from 'react';\n\nexport const useDayRange = (props) => {\n\n    const {\n        date,\n        value,\n        onChange,\n        hoverDate,\n    } = props;\n\n    const {adapter} = useDatePickerContext();\n    const dayHooks = useDay(props);\n\n    const onClick = (date) => {\n        if (value.length === 0 || value.length === 2) {\n            onChange([date]);\n        } else {\n            if (adapter.isAfter(date, value[0])) {\n                onChange([\n                    value[0],\n                    date,\n                ]);\n            } else {\n                onChange([]);\n            }\n        }\n    };\n\n    const isActive = (\n        value[0] &&\n        adapter.isValid(value[0]) &&\n        adapter.format(date, 'fullDate') === adapter.format(value[0], 'fullDate')\n    ) || (\n        value[1] &&\n        adapter.isValid(value[1]) &&\n        adapter.format(date, 'fullDate') === adapter.format(value[1], 'fullDate')\n    ) || (\n        value[0] &&\n        adapter.isValid(value[0]) &&\n        value[1] &&\n        adapter.isValid(value[1]) &&\n        adapter.isBefore(value[0], date) &&\n        adapter.isAfter(value[1], date)\n\n    );\n\n    const isHover = (\n        hoverDate &&\n        adapter.isValid(hoverDate) &&\n        value[0] &&\n        adapter.isValid(value[0]) &&\n        (\n            !value[1] ||\n            !adapter.isValid(value[1])\n        ) &&\n        adapter.isBefore(value[0], date) &&\n        adapter.isAfter(adapter.addDays(hoverDate, 1), date)\n    );\n\n\n    return {\n        ...dayHooks,\n        onClick,\n        isActive,\n        isHover,\n    };\n};\n","import React from 'react';\nimport './App.css';\nimport Sample from './Sample';\nimport Calendar from './datepicker/src/containers/Calendar';\nimport Day from './datepicker/src/containers/Day';\nimport CalendarRange from './datepicker/src/containers/CalendarRange';\nimport DayRange from './datepicker/src/containers/DayRange';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Sample\n                {...{\n                    CalendarComponent: Calendar,\n                    CalendarComponentProps: {months: 1},\n                    DayComponent: Day,\n                    isRange: false,\n                    title: \"Simple Datepicker\",\n                }}\n            />\n            <Sample\n                {...{\n                    CalendarComponent: CalendarRange,\n                    CalendarComponentProps: {months: 2},\n                    DayComponent: DayRange,\n                    isRange: true,\n                    title: \"Range picker 2 months\",\n                }}\n            />\n            <Sample\n                {...{\n                    CalendarComponent: CalendarRange,\n                    CalendarComponentProps: {months: 3},\n                    DayComponent: DayRange,\n                    isRange: true,\n                    title: \"Range picker 3 months\",\n                }}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {DatePickerContext} from './index';\n\nclass DatePickerContextProvider extends React.Component {\n    state = {\n        Adapter: this.props.adapter,\n        adapter: new this.props.adapter(),\n    };\n\n    render() {\n\n        return (\n            <DatePickerContext.Provider value={this.state}>\n                {this.props.children}\n            </DatePickerContext.Provider>\n        );\n    }\n}\n\nexport default DatePickerContextProvider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport DatePickerContextProvider from './datepicker/src/context/DatePickerContextProvider';\nimport JalaliUtils from \"@date-io/jalaali\";\nimport jMoment from \"moment-jalaali\";\nimport './datepicker/src/styles/style.css';\n\njMoment.loadPersian({dialect: \"persian-modern\"});\n\nReactDOM.render((\n    <DatePickerContextProvider adapter={JalaliUtils}>\n        <App/>\n    </DatePickerContextProvider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}